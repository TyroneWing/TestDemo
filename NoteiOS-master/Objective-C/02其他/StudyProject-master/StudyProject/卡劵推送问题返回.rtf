{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;\red65\green204\blue69;\red228\green124\blue72;\red120\green109\blue255;
\red255\green44\blue56;\red211\green24\blue149;\red0\green160\blue255;\red35\green255\blue131;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab577
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \CocoaLigature0 // 1.
\f1 \'ba\'ea\'b6\'a8\'d2\'e5\'d3\'eb\'b4\'f8\'b2\'ce\'ca\'fd\'b5\'c4\'ba\'ea\'b6\'a8\'d2\'e5
\f0 \cf1 \
\cf3 #define K \cf4 0\cf3 \
#define KK(a)  ((a)*(a))\
\cf1 \
\cf2 // 2.
\f1 \'ba\'ea\'b6\'a8\'d2\'e5\'d3\'eb\'c8\'a1\'cf\'fb\'ba\'ea\'b6\'a8\'d2\'e5
\f0 \cf1 \
\cf3 #define PI \cf4 3.14\cf3 \
#undef  PI   \cf2 // 
\f1 \'c7\'bf\'d6\'c6\'d6\'d5\'d6\'b9\'ba\'ea\'b6\'a8\'d2\'e5
\f0 \cf1 \
\
\cf2 // 3.
\f1 \'cc\'f5\'bc\'fe\'b1\'e0\'d2\'eb
\f0 \cf1 \
\
\cf2 // 
\f1 \'b5\'c8\'bc\'db\'d3\'da\'a3\'ba
\f0 #ifdef COUNT,
\f1 \'cf\'e0\'b7\'b4\'c8\'e7\'b9\'fb\'c5\'d0\'b6\'cf\'c3\'bb\'d3\'d0\'b6\'a8\'d2\'e5\'b9\'fd\'d4\'f2\'bf\'c9\'d2\'d4\'cd\'a8\'b9\'fd
\f0 #if !defined(COUNT)
\f1 \'bb\'f2\'d5\'df
\f0 #ifndef COUNT\cf1 \
\
\
\cf2 // 
\f1 \'c8\'e7\'b9\'fb\'b6\'a8\'d2\'e5\'c1\'cb
\f0  
\f1 \'ba\'ea
\f0  
\f1 \'be\'cd
\f0 else
\f1 \'be\'cd
\f0 \cf1 \
\cf3 #ifdef COUNT\
#else\
#endif\
\cf1 \
\
\cf2 // 
\f1 \'c8\'e7\'b9\'fb\'b6\'a8\'d2\'e5\'c1\'cb
\f0  
\f1 \'ba\'ea
\f0  
\f1 \'be\'cd
\f0 \cf1 \
\cf3 #ifdef COUNT\
#endif\
\cf1 \
\cf2 // 
\f1 \'c8\'e7\'b9\'fb\'c3\'bb\'b6\'a8\'d2\'e5\'c1\'cb
\f0  
\f1 \'ba\'ea
\f0  
\f1 \'be\'cd
\f0 \cf1 \
\cf3 #ifndef ccc\
#else\
#endif\
\cf1 \
\cf2 // 
\f1 \'c8\'e7\'b9\'fb\'c3\'bb\'b6\'a8\'d2\'e5\'c1\'cb
\f0  
\f1 \'ba\'ea
\f0  
\f1 \'be\'cd
\f0 \cf1 \
\cf3 #ifndef ccc\
#endif\
\cf1 \
\
\cf3 #if !defined cc\
#endif\
\cf1 \
\cf3 #ifndef cc\
#endif\
\cf1 \
\cf2 // 
\f1 \'c8\'e7\'b9\'fb\'c3\'bb\'b6\'a8\'d2\'e5\'c1\'cb
\f0  
\f1 \'ba\'ea
\f0  
\f1 \'be\'cd
\f0 \cf1 \
\cf3 #if !defined(COUNT)\
#endif\
\cf1 \
\cf2 //4.
\f1 \'c5\'d0\'b6\'cf\'ba\'ea\'b6\'a8\'d2\'e5
\f0 COUNT
\f1 \'ca\'c7\'b7\'f1\'b5\'c8\'d3\'da
\f0 1\cf1 \
\cf3 #if COUNT == \cf4 1\cf3   \cf2 // 
\f1 \'c8\'e7\'b9\'fb\'b3\'c9\'c1\'a2
\f0 \cf1 \
\cf3 #else\
#endif\
\cf1 \
\cf2 //5.
\f1 \'c5\'d0\'b6\'cf\'ba\'ea\'b6\'a8\'d2\'e5
\f0 COUNT
\f1 \'ca\'c7\'b7\'f1\'b5\'c8\'d3\'da
\f0 1\cf1 \
\cf3 #if \cf4 0\cf3   \cf2 // 
\f1 \'c8\'e7\'b9\'fb\'b3\'c9\'c1\'a2
\f0 \cf1 \
\cf3 #endif\
\cf1 \
\cf2 //6.
\f1 \'c5\'d0\'b6\'cf\'ba\'ea\'b6\'a8\'d2\'e5
\f0 COUNT
\f1 \'ca\'c7\'b7\'f1\'b5\'c8\'d3\'da
\f0 1\cf1 \
\cf3 #ifndef kk \cf2 // 
\f1 \'c8\'e7\'b9\'fb\'c3\'bb\'d3\'d0\'b6\'a8\'d2\'e5\'ba\'ea\'be\'cd\'bd\'f8\'c8\'eb
\f0 \cf1 \
\cf3 #define kk\
#endif\
\
\cf1 \
\cf3 #define aaaa(c,d)  c##d\
\
\
\
\
\
\
\cf2 //\cf1 \
\cf2 //  HMLineView.m\cf1 \
\cf2 //  01-
\f1 \'bb\'f9\'b1\'be\'cd\'bc\'d0\'ce\'bb\'e6\'d6\'c6
\f0 \cf1 \
\cf2 //\cf1 \
\cf2 //  Created by apple on 14-9-2.\cf1 \
\cf2 //  Copyright (c) 2014
\f1 \'c4\'ea
\f0  itcast. All rights reserved.\cf1 \
\cf2 //\cf1 \
\
\cf3 #import \cf5 "HMLineView.h"\cf3 \
\cf1 \
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf6 @implementation\cf1  HMLineView\
\
- (\cf6 id\cf1 )initWithFrame:(\cf7 CGRect\cf1 )frame\
\{\
    \cf6 self\cf1  = [\cf6 super\cf1  \cf7 initWithFrame\cf1 :frame];\
    \cf6 if\cf1  (\cf6 self\cf1 ) \{\
        \cf2 // Initialization code\cf1 \
    \}\
    \cf6 return\cf1  \cf6 self\cf1 ;\
\}\
\
\
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf2 // Only override drawRect: if you perform custom drawing.\cf1 \
\cf2 // An empty implementation adversely affects performance during animation.\cf1 \
\
\cf2 /**\
 *  
\f1 \'ca\'b2\'c3\'b4\'b5\'f7\'d3\'c3\'a3\'ba\'b5\'b1\'c4\'e3\'ca\'d3\'cd\'bc\'b5\'da\'d2\'bb\'b4\'ce\'cf\'d4\'ca\'be\'b5\'c4\'ca\'b1\'ba\'f2\'be\'cd\'bb\'e1\'b5\'f7\'d3\'c3
\f0 \
 *  
\f1 \'d7\'f7\'d3\'c3\'a3\'ba\'bb\'e6\'cd\'bc
\f0 \
 *  @param rect = self.bounds\
 */\cf1 \
- (\cf6 void\cf1 )drawRect:(\cf7 CGRect\cf1 )rect\
\{\
    \cf2 // 1.
\f1 \'bb\'f1\'c8\'a1\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextRef\cf1  ctx = \cf7 UIGraphicsGetCurrentContext\cf1 ();\
    \
    \cf2 // 2.
\f1 \'c6\'b4\'bd\'d3\'c2\'b7\'be\'b6
\f0 \cf1 \
    \cf7 UIBezierPath\cf1  *path = [\cf7 UIBezierPath\cf1  \cf7 bezierPath\cf1 ];\
    \
    \cf7 CGPoint\cf1  startP = \cf7 CGPointMake\cf1 (\cf4 10\cf1 , \cf4 125\cf1 );\
    \cf7 CGPoint\cf1  endP = \cf7 CGPointMake\cf1 (\cf4 240\cf1 , \cf4 125\cf1 );\
    \cf7 CGPoint\cf1  controlP = \cf7 CGPointMake\cf1 (\cf4 125\cf1 , \cf4 0\cf1 );\
    [path \cf7 moveToPoint\cf1 :startP];\
    [path \cf7 addQuadCurveToPoint\cf1 :endP \cf7 controlPoint\cf1 :controlP];\
    \
    \cf2 // 3.
\f1 \'b0\'d1\'c2\'b7\'be\'b6\'cc\'ed\'bc\'d3\'b5\'bd\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextAddPath\cf1 (ctx, path.\cf7 CGPath\cf1 );\
    \
    \cf2 // 4.
\f1 \'e4\'d6\'c8\'be\'c9\'cf\'cf\'c2\'ce\'c4\'b5\'bd\'ca\'d3\'cd\'bc
\f0 \cf1 \
    \cf7 CGContextStrokePath\cf1 (ctx);\
    \
\}\
\
- (\cf6 void\cf1 )draw2Line\
\{\
    \cf2 // 1.
\f1 \'bb\'f1\'c8\'a1\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextRef\cf1  ctx = \cf7 UIGraphicsGetCurrentContext\cf1 ();\
    \
    \cf2 // 2.
\f1 \'c6\'b4\'bd\'d3\'c2\'b7\'be\'b6
\f0 \cf1 \
    \cf7 UIBezierPath\cf1  *path = [\cf7 UIBezierPath\cf1  \cf7 bezierPath\cf1 ];\
    \
    \cf2 // 
\f1 \'c9\'e8\'d6\'c3\'c6\'f0\'b5\'e3
\f0 \cf1 \
    [path \cf7 moveToPoint\cf1 :\cf7 CGPointMake\cf1 (\cf4 10\cf1 , \cf4 125\cf1 )];\
    \
    \cf2 // 
\f1 \'cc\'ed\'bc\'d3\'d2\'bb\'cc\'f5\'cf\'df\'b5\'bd\'c4\'b3\'b8\'f6\'b5\'e3
\f0 \cf1 \
    [path \cf7 addLineToPoint\cf1 :\cf7 CGPointMake\cf1 (\cf4 230\cf1 , \cf4 125\cf1 )];\
    \
    \cf2 //    // 
\f1 \'c9\'e8\'d6\'c3\'c6\'f0\'b5\'e3
\f0 \cf1 \
    \cf2 //    [path moveToPoint:CGPointMake(10, 10)];\cf1 \
    \cf2 //\cf1 \
    \cf2 //    // 
\f1 \'cc\'ed\'bc\'d3\'d2\'bb\'cc\'f5\'cf\'df\'b5\'bd\'c4\'b3\'b8\'f6\'b5\'e3
\f0 \cf1 \
    \cf2 //    [path addLineToPoint:CGPointMake(125, 100)];\cf1 \
    \
    \cf7 UIBezierPath\cf1  *path1 = [\cf7 UIBezierPath\cf1  \cf7 bezierPath\cf1 ];\
    \
    [path1 \cf7 moveToPoint\cf1 :\cf7 CGPointMake\cf1 (\cf4 10\cf1 , \cf4 10\cf1 )];\
    \
    [path1 \cf7 addLineToPoint\cf1 :\cf7 CGPointMake\cf1 (\cf4 125\cf1 , \cf4 100\cf1 )];\
\
    [path1 \cf7 addLineToPoint\cf1 :\cf7 CGPointMake\cf1 (\cf4 125\cf1 , \cf4 20\cf1 )];\
\
    \
    \cf2 // 3.
\f1 \'b0\'d1\'c2\'b7\'be\'b6\'cc\'ed\'bc\'d3\'b5\'bd\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextAddPath\cf1 (ctx, path.\cf7 CGPath\cf1 );\
    \cf7 CGContextAddPath\cf1 (ctx, path1.\cf7 CGPath\cf1 );\
    \
    \cf2 // 
\f1 \'c9\'e8\'d6\'c3\'bb\'e6\'cd\'bc\'d7\'b4\'cc\'ac
\f0 \cf1 \
    \cf2 // 
\f1 \'c9\'e8\'d6\'c3\'cf\'df\'bf\'ed
\f0 \cf1 \
    \cf7 CGContextSetLineWidth\cf1 (ctx, \cf4 1\cf1 );\
    \cf7 CGContextSetLineCap\cf1 (ctx, \cf7 kCGLineCapRound\cf1 );\
    \cf2 //    CGContextSetRGBStrokeColor(ctx, 1, 0, 0, 1);\cf1 \
    [[\cf7 UIColor\cf1  \cf7 redColor\cf1 ] \cf7 set\cf1 ];\
    \
    \cf2 // 4.
\f1 \'e4\'d6\'c8\'be\'c9\'cf\'cf\'c2\'ce\'c4\'b5\'bd\'ca\'d3\'cd\'bc
\f0 \cf1 \
    \cf7 CGContextStrokePath\cf1 (ctx);\
\}\
\
- (\cf6 void\cf1 )drawLine\
\{\
    \cf2 // 1.
\f1 \'bb\'f1\'c8\'a1\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf2 // CGContextRef CG CoreGraphics Ref 
\f1 \'d2\'fd\'d3\'c3
\f0 \cf1 \
    \cf2 // 
\f1 \'c4\'bf\'c7\'b0\'d1\'a7\'b5\'c4\'c9\'cf\'cf\'c2\'ce\'c4\'b6\'bc\'b8\'fa
\f0 UIGraphics
\f1 \'d3\'d0\'b9\'d8\'a3\'ac\'d2\'d4\'ba\'f3\'cf\'eb\'d6\'b1\'bd\'d3\'bb\'f1\'c8\'a1\'c9\'cf\'cf\'c2\'ce\'c4\'a3\'ac\'d6\'b1\'bd\'d3\'c7\'c3\'d2\'bb\'b8\'f6
\f0 UIGraphics\cf1 \
    \cf7 CGContextRef\cf1  ctx = \cf7 UIGraphicsGetCurrentContext\cf1 ();\
    \
    \cf2 // 2.
\f1 \'c9\'e8\'d6\'c3\'bb\'e6\'cd\'bc\'d0\'c5\'cf\'a2
\f0 (
\f1 \'c6\'b4\'bd\'d3\'c2\'b7\'be\'b6
\f0 )\cf1 \
    \cf7 UIBezierPath\cf1  *path = [\cf7 UIBezierPath\cf1  \cf7 bezierPath\cf1 ];\
    \
    \cf2 // 
\f1 \'c9\'e8\'d6\'c3\'c6\'f0\'b5\'e3
\f0 \cf1 \
    [path \cf7 moveToPoint\cf1 :\cf7 CGPointMake\cf1 (\cf4 10\cf1 , \cf4 10\cf1 )];\
    \
    \cf2 // 
\f1 \'cc\'ed\'bc\'d3\'d2\'bb\'cc\'f5\'cf\'df\'b5\'bd\'c4\'b3\'b8\'f6\'b5\'e3
\f0 \cf1 \
    [path \cf7 addLineToPoint\cf1 :\cf7 CGPointMake\cf1 (\cf4 125\cf1 , \cf4 125\cf1 )];\
    [path \cf7 addLineToPoint\cf1 :\cf7 CGPointMake\cf1 (\cf4 240\cf1 , \cf4 10\cf1 )];\
    \cf2 // 3.
\f1 \'b0\'d1\'c2\'b7\'be\'b6\'cc\'ed\'bc\'d3\'b5\'bd\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf2 // 
\f1 \'d6\'b1\'bd\'d3\'b0\'d1
\f0 UIKit
\f1 \'b5\'c4\'c2\'b7\'be\'b6\'d7\'aa\'bb\'bb\'b3\'c9
\f0 CoreGraphics
\f1 \'a3\'ac
\f0 CG
\f1 \'bf\'aa\'cd\'b7\'be\'cd\'c4\'dc\'d7\'aa
\f0 \cf1 \
    \cf7 CGContextAddPath\cf1 (ctx, path.\cf7 CGPath\cf1 );\
    \
    \cf2 // 4.
\f1 \'b0\'d1\'c9\'cf\'cf\'c2\'ce\'c4\'e4\'d6\'c8\'be\'b5\'bd\'ca\'d3\'cd\'bc
\f0 \cf1 \
    \cf2 // Stroke
\f1 \'c3\'e8\'b1\'df
\f0 \cf1 \
    \cf7 CGContextStrokePath\cf1 (ctx);\
\}\
\
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf6 @end\cf1 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf2 //\cf1 \
\cf2 //  HMShapeView.m\cf1 \
\cf2 //  01-
\f1 \'bb\'f9\'b1\'be\'cd\'bc\'d0\'ce\'bb\'e6\'d6\'c6
\f0 \cf1 \
\cf2 //\cf1 \
\cf2 //  Created by apple on 14-9-2.\cf1 \
\cf2 //  Copyright (c) 2014
\f1 \'c4\'ea
\f0  itcast. All rights reserved.\cf1 \
\cf2 //\cf1 \
\
\cf3 #import \cf5 "HMShapeView.h"\cf3 \
\cf1 \
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf6 @interface\cf1  \cf8 HMShapeView\cf1 ()\
\
\cf6 @property\cf1  (\cf6 nonatomic\cf1 , \cf6 weak\cf1 ) \cf7 UILabel\cf1  *label;\
\
\cf6 @end\cf1 \
\
\cf6 @implementation\cf1  HMShapeView\
\
- (\cf7 UILabel\cf1  *)label\
\{\
    \cf6 if\cf1  (\cf8 _label\cf1  == \cf6 nil\cf1 ) \{\
        \cf7 UILabel\cf1  *label = [[\cf7 UILabel\cf1  \cf7 alloc\cf1 ] \cf7 initWithFrame\cf1 :\cf7 CGRectMake\cf1 (\cf4 0\cf1 , \cf4 0\cf1 , \cf4 250\cf1 , \cf4 100\cf1 )];\
        label.\cf7 text\cf1  = \cf5 @"s"\cf1 ;\
        label.\cf7 font\cf1  = [\cf7 UIFont\cf1  \cf7 systemFontOfSize\cf1 :\cf4 60\cf1 ];\
        label.\cf7 textColor\cf1  = [\cf7 UIColor\cf1  \cf7 yellowColor\cf1 ];\
        label.\cf7 textAlignment\cf1  = \cf7 NSTextAlignmentCenter\cf1 ;\
        [\cf6 self\cf1  \cf7 addSubview\cf1 :label];\
        \cf8 _label\cf1  = label;\
    \}\
    \cf6 return\cf1  \cf8 _label\cf1 ;\
\}\
\
- (\cf6 id\cf1 )initWithFrame:(\cf7 CGRect\cf1 )frame\
\{\
    \cf6 self\cf1  = [\cf6 super\cf1  \cf7 initWithFrame\cf1 :frame];\
    \cf6 if\cf1  (\cf6 self\cf1 ) \{\
        \cf2 // Initialization code\cf1 \
    \}\
    \cf6 return\cf1  \cf6 self\cf1 ;\
\}\
\
- (\cf6 void\cf1 )awakeFromNib\
\{\
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf2 //    self.label;\cf1 \
\}\
\
\
\cf2 // Only override drawRect: if you perform custom drawing.\cf1 \
\cf2 // An empty implementation adversely affects performance during animation.\cf1 \
- (\cf6 void\cf1 )drawRect:(\cf7 CGRect\cf1 )rect\
\{\
    \cf2 // Drawing code\cf1 \
   \
    \cf2 // 1.
\f1 \'bb\'f1\'c8\'a1\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextRef\cf1  ctx = \cf7 UIGraphicsGetCurrentContext\cf1 ();\
    \
    \cf2 // 2.
\f1 \'c6\'b4\'bd\'d3\'c2\'b7\'be\'b6
\f0 \cf1 \
    \cf7 CGPoint\cf1  center = \cf7 CGPointMake\cf1 (\cf4 125\cf1 , \cf4 125\cf1 );\
    \cf7 CGFloat\cf1  radius = \cf4 100\cf1 ;\
    \cf7 CGFloat\cf1  startA = \cf4 0\cf1 ;\
    \cf7 CGFloat\cf1  endA = \cf3 M_PI_2\cf1 ;\
    \cf7 UIBezierPath\cf1  *path = [\cf7 UIBezierPath\cf1  \cf7 bezierPathWithArcCenter\cf1 :center \cf7 radius\cf1 :radius \cf7 startAngle\cf1 :startA \cf7 endAngle\cf1 :endA \cf7 clockwise\cf1 :\cf6 YES\cf1 ];\
    \
    [path \cf7 addLineToPoint\cf1 :center];\
    \
    \cf2 // 3.
\f1 \'b0\'d1\'c2\'b7\'be\'b6\'cc\'ed\'bc\'d3\'b5\'bd\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextAddPath\cf1 (ctx, path.\cf7 CGPath\cf1 );\
    \
    \cf2 // 4.
\f1 \'e4\'d6\'c8\'be\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
\cf2 //    CGContextStrokePath(ctx);\cf1 \
    \cf7 CGContextFillPath\cf1 (ctx);\
\
\
\}\
\
- (\cf6 void\cf1 )drawArc\
\{\
    \cf2 // 1.
\f1 \'bb\'f1\'c8\'a1\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextRef\cf1  ctx = \cf7 UIGraphicsGetCurrentContext\cf1 ();\
    \
    \cf2 // 2.
\f1 \'c6\'b4\'bd\'d3\'c2\'b7\'be\'b6
\f0 \cf1 \
    \cf7 CGPoint\cf1  center = \cf7 CGPointMake\cf1 (\cf4 125\cf1 , \cf4 125\cf1 );\
    \cf7 CGFloat\cf1  radius = \cf4 100\cf1 ;\
    \cf7 CGFloat\cf1  startA = \cf4 0\cf1 ;\
    \cf7 CGFloat\cf1  endA = \cf3 M_PI_2\cf1 ;\
    \cf7 UIBezierPath\cf1  *path = [\cf7 UIBezierPath\cf1  \cf7 bezierPathWithArcCenter\cf1 :center \cf7 radius\cf1 :radius \cf7 startAngle\cf1 :startA \cf7 endAngle\cf1 :endA \cf7 clockwise\cf1 :\cf6 YES\cf1 ];\
    \
    \cf2 // 3.
\f1 \'b0\'d1\'c2\'b7\'be\'b6\'cc\'ed\'bc\'d3\'b5\'bd\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextAddPath\cf1 (ctx, path.\cf7 CGPath\cf1 );\
    \
    \cf2 // 4.
\f1 \'e4\'d6\'c8\'be\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextStrokePath\cf1 (ctx);\
\}\
\
- (\cf6 void\cf1 )drawCircle\
\{\
    \cf2 // 1.
\f1 \'bb\'f1\'c8\'a1\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextRef\cf1  ctx = \cf7 UIGraphicsGetCurrentContext\cf1 ();\
    \
    \cf2 // 2.
\f1 \'c6\'b4\'bd\'d3\'c2\'b7\'be\'b6
\f0 \cf1 \
    \cf7 UIBezierPath\cf1  *path = [\cf7 UIBezierPath\cf1  \cf7 bezierPathWithOvalInRect\cf1 :\cf7 CGRectMake\cf1 (\cf4 10\cf1 , \cf4 10\cf1 , \cf4 200\cf1 , \cf4 100\cf1 )];\
    \
    \cf2 // 3.
\f1 \'b0\'d1\'c2\'b7\'be\'b6\'cc\'ed\'bc\'d3\'b5\'bd\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextAddPath\cf1 (ctx, path.\cf7 CGPath\cf1 );\
    \
    \cf2 // 4.
\f1 \'e4\'d6\'c8\'be\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextStrokePath\cf1 (ctx);\
\
\}\
\
- (\cf6 void\cf1 )drawRectangle\
\{\
    \cf2 // 1.
\f1 \'bb\'f1\'c8\'a1\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextRef\cf1  ctx = \cf7 UIGraphicsGetCurrentContext\cf1 ();\
    \
    \cf2 // 2.
\f1 \'c6\'b4\'bd\'d3\'c2\'b7\'be\'b6
\f0 \cf1 \
    \cf7 UIBezierPath\cf1  *path = [\cf7 UIBezierPath\cf1  \cf7 bezierPathWithRect\cf1 :\cf7 CGRectMake\cf1 (\cf4 10\cf1 , \cf4 10\cf1 , \cf4 200\cf1 , \cf4 200\cf1 )];\
    path = [\cf7 UIBezierPath\cf1  \cf7 bezierPathWithRoundedRect\cf1 :\cf7 CGRectMake\cf1 (\cf4 10\cf1 , \cf4 10\cf1 , \cf4 200\cf1 , \cf4 200\cf1 ) \cf7 cornerRadius\cf1 :\cf4 20\cf1 ];\
    \
    \cf2 // 3.
\f1 \'b0\'d1\'c2\'b7\'be\'b6\'cc\'ed\'bc\'d3\'b5\'bd\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextAddPath\cf1 (ctx, path.\cf7 CGPath\cf1 );\
    \
    \cf2 // 4.
\f1 \'e4\'d6\'c8\'be\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextStrokePath\cf1 (ctx);\
\}\
\
- (\cf6 void\cf1 )drawSupernene\
\{\
    \cf2 // 1.
\f1 \'bb\'f1\'c8\'a1\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextRef\cf1  ctx = \cf7 UIGraphicsGetCurrentContext\cf1 ();\
    \
    \cf2 // 2.
\f1 \'c6\'b4\'bd\'d3\'c2\'b7\'be\'b6
\f0 \cf1 \
    \cf7 UIBezierPath\cf1  *path = [\cf7 UIBezierPath\cf1  \cf7 bezierPath\cf1 ];\
    \
    \cf7 CGPoint\cf1  startP = \cf7 CGPointMake\cf1 (\cf4 10\cf1 , \cf4 10\cf1 );\
    \
    [path \cf7 moveToPoint\cf1 :startP];\
    \
    [path \cf7 addLineToPoint\cf1 :\cf7 CGPointMake\cf1 (\cf4 125\cf1 , \cf4 125\cf1 )];\
    \
    [path \cf7 addLineToPoint\cf1 :\cf7 CGPointMake\cf1 (\cf4 240\cf1 , \cf4 10\cf1 )];\
    \
    \cf2 // 
\f1 \'b4\'d3\'c2\'b7\'be\'b6\'b5\'c4\'d6\'d5\'b5\'e3\'c1\'ac\'bd\'d3\'b5\'bd\'c6\'f0\'b5\'e3
\f0 \cf1 \
    [path \cf7 closePath\cf1 ];\
    \cf2 //    [path addLineToPoint:startP];\cf1 \
    \
    \cf2 // 3.
\f1 \'b0\'d1\'c2\'b7\'be\'b6\'cc\'ed\'bc\'d3\'b5\'bd\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextAddPath\cf1 (ctx, path.\cf7 CGPath\cf1 );\
    \
    [[\cf7 UIColor\cf1  \cf7 blueColor\cf1 ] \cf7 setFill\cf1 ];\
    [[\cf7 UIColor\cf1  \cf7 redColor\cf1 ] \cf7 setStroke\cf1 ];\
    \
    \cf7 CGContextSetLineWidth\cf1 (ctx, \cf4 15\cf1 );\
    \
    \cf2 // 4.
\f1 \'e4\'d6\'c8\'be\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf2 //    CGContextStrokePath(ctx);\cf1 \
    \cf2 //    CGContextFillPath(ctx);\cf1 \
    \cf2 // 
\f1 \'bc\'b4\'cc\'ee\'b3\'e4\'d3\'d6\'c3\'e8\'b1\'df
\f0  kCGPathFillStroke\cf1 \
    \cf7 CGContextDrawPath\cf1 (ctx, \cf7 kCGPathFillStroke\cf1 );\
\}\
\
\
\
\
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf6 @end\cf1 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf2 //\cf1 \
\cf2 //  HMProgressView.m\cf1 \
\cf2 //  02-
\f1 \'cf\'c2\'d4\'d8\'bd\'f8\'b6\'c8\'cc\'f5
\f0 \cf1 \
\cf2 //\cf1 \
\cf2 //  Created by apple on 14-9-2.\cf1 \
\cf2 //  Copyright (c) 2014
\f1 \'c4\'ea
\f0  itcast. All rights reserved.\cf1 \
\cf2 //\cf1 \
\
\cf3 #import \cf5 "HMProgressView.h"\cf3 \
\cf1 \
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf6 @interface\cf1  \cf8 HMProgressView\cf1 ()\
\
\cf6 @property\cf1  (\cf6 nonatomic\cf1 , \cf6 weak\cf1 ) \cf7 UILabel\cf1  *label;\
\
\cf6 @end\cf1 \
\
\
\
\cf6 @implementation\cf1  HMProgressView\
\
- (\cf7 UILabel\cf1  *)label\
\{\
    \cf6 if\cf1  (\cf8 _label\cf1  == \cf6 nil\cf1 ) \{\
        \cf7 UILabel\cf1  *label = [[\cf7 UILabel\cf1  \cf7 alloc\cf1 ] \cf7 initWithFrame\cf1 :\cf7 CGRectMake\cf1 (\cf4 0\cf1 , \cf4 0\cf1 , \cf4 100\cf1 , \cf4 100\cf1 )];\
        label.\cf7 textAlignment\cf1  = \cf7 NSTextAlignmentCenter\cf1 ;\
        \
        [\cf6 self\cf1  \cf7 addSubview\cf1 :label];\
        \cf8 _label\cf1  = label;\
    \}\
    \cf6 return\cf1  \cf8 _label\cf1 ;\
\}\
\
- (\cf6 void\cf1 )setProgress:(\cf7 CGFloat\cf1 )progress\
\{\
    \cf8 _progress\cf1  = progress;\
    \cf6 self\cf1 .\cf8 label\cf1 .\cf7 text\cf1  = [\cf7 NSString\cf1  \cf7 stringWithFormat\cf1 :\cf5 @"%.2f%%"\cf1 ,progress * \cf4 100\cf1 ];\
    \
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf2 //    [self drawRect:self.bounds];\cf1 \
    \cf2 // 
\f1 \'d6\'d8\'d0\'c2\'bb\'e6\'d6\'c6
\f0 \cf1 \
    \cf2 // 
\f1 \'d4\'da
\f0 view
\f1 \'c9\'cf\'d7\'f6\'d2\'bb\'b8\'f6\'d6\'d8\'bb\'e6\'b5\'c4\'b1\'ea\'bc\'c7\'a3\'ac\'b5\'b1\'cf\'c2\'b4\'ce\'c6\'c1\'c4\'bb\'cb\'a2\'d0\'c2\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'be\'cd\'bb\'e1\'b5\'f7\'d3\'c3
\f0 drawRect.\cf1 \
    [\cf6 self\cf1  \cf7 setNeedsDisplay\cf1 ];\
\}\
\
\
\cf2 // Only override drawRect: if you perform custom drawing.\cf1 \
\cf2 // An empty implementation adversely affects performance during animation.\cf1 \
\cf2 // 
\f1 \'b5\'b1\'ca\'d3\'cd\'bc\'cf\'d4\'ca\'be\'b5\'c4\'ca\'b1\'ba\'f2\'bb\'e1\'b5\'f7\'d3\'c3
\f0  
\f1 \'c4\'ac\'c8\'cf\'d6\'bb\'bb\'e1\'b5\'f7\'d3\'c3\'d2\'bb\'b4\'ce
\f0 \cf1 \
- (\cf6 void\cf1 )drawRect:(\cf7 CGRect\cf1 )rect\
\{\
    \cf2 // Drawing code\cf1 \
    \
    \cf2 // 1.
\f1 \'bb\'f1\'c8\'a1\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextRef\cf1  ctx = \cf7 UIGraphicsGetCurrentContext\cf1 ();\
    \
    \cf2 // 2.
\f1 \'c6\'b4\'bd\'d3\'c2\'b7\'be\'b6
\f0 \cf1 \
    \cf7 CGPoint\cf1  center = \cf7 CGPointMake\cf1 (\cf4 50\cf1 , \cf4 50\cf1 );\
    \cf7 CGFloat\cf1  radius = \cf4 50\cf1  - \cf4 2\cf1 ;\
    \cf7 CGFloat\cf1  startA = -\cf3 M_PI_2\cf1 ;\
    \cf7 CGFloat\cf1  endA = -\cf3 M_PI_2\cf1  + \cf8 _progress\cf1  * \cf3 M_PI\cf1  * \cf4 2\cf1 ;\
    \cf7 UIBezierPath\cf1  *path = [\cf7 UIBezierPath\cf1  \cf7 bezierPathWithArcCenter\cf1 :center \cf7 radius\cf1 :radius \cf7 startAngle\cf1 :startA \cf7 endAngle\cf1 :endA \cf7 clockwise\cf1 :\cf6 YES\cf1 ];\
    \
    \cf2 // 3.
\f1 \'b0\'d1\'c2\'b7\'be\'b6\'cc\'ed\'bc\'d3\'b5\'bd\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextAddPath\cf1 (ctx, path.\cf7 CGPath\cf1 );\
    \
    \cf2 // 4.
\f1 \'b0\'d1\'c9\'cf\'cf\'c2\'ce\'c4\'e4\'d6\'c8\'be\'b5\'bd\'ca\'d3\'cd\'bc
\f0 \cf1 \
    \cf7 CGContextStrokePath\cf1 (ctx);\
    \
\}\
\
\
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf6 @end\cf1 \
\
\
\
\
\
\
\
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf2 //\cf1 \
\cf2 //  HMPieView.m\cf1 \
\cf2 //  03-
\f1 \'b1\'fd\'cd\'bc
\f0 \cf1 \
\cf2 //\cf1 \
\cf2 //  Created by apple on 14-9-2.\cf1 \
\cf2 //  Copyright (c) 2014
\f1 \'c4\'ea
\f0  itcast. All rights reserved.\cf1 \
\cf2 //\cf1 \
\
\cf3 #import \cf5 "HMPieView.h"\cf3 \
#import \cf5 "UIColor+Random.h"\cf3 \
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf6 @implementation\cf1  HMPieView\
\
- (\cf6 id\cf1 )initWithFrame:(\cf7 CGRect\cf1 )frame\
\{\
    \cf6 self\cf1  = [\cf6 super\cf1  \cf7 initWithFrame\cf1 :frame];\
    \cf6 if\cf1  (\cf6 self\cf1 ) \{\
        \cf2 // Initialization code\cf1 \
    \}\
    \cf6 return\cf1  \cf6 self\cf1 ;\
\}\
\
\
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf2 // Only override drawRect: if you perform custom drawing.\cf1 \
\cf2 // An empty implementation adversely affects performance during animation.\cf1 \
- (\cf6 void\cf1 )drawRect:(\cf7 CGRect\cf1 )rect\
\{\
    \cf2 // Drawing code\cf1 \
    \
    \cf7 NSArray\cf1  *data = \cf4 @[@25\cf1 ,\cf4 @25\cf1 ,\cf4 @50]\cf1 ;\
    \
    \cf2 // 1.
\f1 \'bb\'f1\'c8\'a1\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextRef\cf1  ctx = \cf7 UIGraphicsGetCurrentContext\cf1 ();\
    \
    \cf2 // 2.
\f1 \'c6\'b4\'bd\'d3\'c2\'b7\'be\'b6
\f0 \cf1 \
    \cf7 CGPoint\cf1  center = \cf7 CGPointMake\cf1 (\cf4 125\cf1 , \cf4 125\cf1 );\
    \cf7 CGFloat\cf1  radius = \cf4 120\cf1 ;\
    \cf7 CGFloat\cf1  startA = \cf4 0\cf1 ;\
    \cf7 CGFloat\cf1  angle = \cf4 0\cf1 ;\
    \cf7 CGFloat\cf1  endA = \cf4 0\cf1 ;\
    \
    \cf6 for\cf1  (\cf7 NSNumber\cf1  *number \cf6 in\cf1  data) \{\
        \cf2 // 2.
\f1 \'c6\'b4\'bd\'d3\'c2\'b7\'be\'b6
\f0 \cf1 \
        startA = endA;\
        angle = number.\cf7 intValue\cf1  / \cf4 100.0\cf1  * \cf3 M_PI\cf1  * \cf4 2\cf1 ;\
        endA = startA + angle;\
        \cf7 UIBezierPath\cf1  *path = [\cf7 UIBezierPath\cf1  \cf7 bezierPathWithArcCenter\cf1 :center \cf7 radius\cf1 :radius \cf7 startAngle\cf1 :startA \cf7 endAngle\cf1 :endA \cf7 clockwise\cf1 :\cf6 YES\cf1 ];\
        [path \cf7 addLineToPoint\cf1 :center];\
        \
        [[\cf7 UIColor\cf1  \cf8 randomColor\cf1 ] \cf7 set\cf1 ];\
        \cf2 // 
\f1 \'b0\'d1\'c2\'b7\'be\'b6\'cc\'ed\'bc\'d3\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
        \cf7 CGContextAddPath\cf1 (ctx, path.\cf7 CGPath\cf1 );\
        \
        \cf2 // 
\f1 \'e4\'d6\'c8\'be
\f0 \cf1 \
        \cf7 CGContextFillPath\cf1 (ctx);\
        \
    \}\
\
    \
\}\
\
- (\cf6 void\cf1 )touchesBegan:(\cf7 NSSet\cf1  *)touches withEvent:(\cf7 UIEvent\cf1  *)event\
\{\
    \cf7 CGFloat\cf1  a = \cf7 arc4random_uniform\cf1 (\cf4 6\cf1 );\
    \cf2 //CGFloat a =  arc4random()%6;\cf1 \
    \cf7 NSLog\cf1 (\cf5 @"
\f1 \'cb\'e6\'bb\'fa\'ca\'fd
\f0 --%f"\cf1 ,a);\
    \
\
    [\cf6 self\cf1  \cf7 setNeedsDisplay\cf1 ];\
\}\
\
- (\cf6 void\cf1 )drawPie\
\{\
    \cf2 // 1.
\f1 \'bb\'f1\'c8\'a1\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextRef\cf1  ctx = \cf7 UIGraphicsGetCurrentContext\cf1 ();\
    \
    \cf2 // 2.
\f1 \'c6\'b4\'bd\'d3\'c2\'b7\'be\'b6
\f0 \cf1 \
    \cf7 CGPoint\cf1  center = \cf7 CGPointMake\cf1 (\cf4 125\cf1 , \cf4 125\cf1 );\
    \cf7 CGFloat\cf1  radius = \cf4 120\cf1 ;\
    \cf7 CGFloat\cf1  startA = \cf4 0\cf1 ;\
    \cf7 CGFloat\cf1  angle = \cf4 0\cf1 ;\
    \cf7 CGFloat\cf1  endA = \cf4 0\cf1 ;\
    \
    \cf2 // 
\f1 \'b5\'da\'d2\'bb\'b8\'f6\'c9\'c8\'d0\'ce
\f0 \cf1 \
    angle = \cf4 25\cf1  / \cf4 100.0\cf1  * \cf3 M_PI\cf1  * \cf4 2\cf1 ;\
    endA = startA + angle;\
    \cf7 UIBezierPath\cf1  *path = [\cf7 UIBezierPath\cf1  \cf7 bezierPathWithArcCenter\cf1 :center \cf7 radius\cf1 :radius \cf7 startAngle\cf1 :startA \cf7 endAngle\cf1 :endA \cf7 clockwise\cf1 :\cf6 YES\cf1 ];\
    [path \cf7 addLineToPoint\cf1 :center];\
    \cf2 // 
\f1 \'cc\'ed\'bc\'d3\'b5\'bd\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextAddPath\cf1 (ctx, path.\cf7 CGPath\cf1 );\
    [[\cf7 UIColor\cf1  \cf7 redColor\cf1 ] \cf7 set\cf1 ];\
    \
    \
    \cf2 // 
\f1 \'e4\'d6\'c8\'be
\f0 \cf1 \
    \cf7 CGContextFillPath\cf1 (ctx);\
    \
    \
    \
    \cf2 // 
\f1 \'b5\'da\'b6\'fe\'b8\'f6\'c9\'c8\'d0\'ce
\f0 \cf1 \
    startA = endA;\
    angle = \cf4 25\cf1  / \cf4 100.0\cf1  * \cf3 M_PI\cf1  * \cf4 2\cf1 ;\
    endA = startA + angle;\
    \cf7 UIBezierPath\cf1  *path1 = [\cf7 UIBezierPath\cf1  \cf7 bezierPathWithArcCenter\cf1 :center \cf7 radius\cf1 :radius \cf7 startAngle\cf1 :startA \cf7 endAngle\cf1 :endA \cf7 clockwise\cf1 :\cf6 YES\cf1 ];\
    [path1 \cf7 addLineToPoint\cf1 :center];\
    \cf2 // 
\f1 \'cc\'ed\'bc\'d3\'b5\'bd\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextAddPath\cf1 (ctx, path1.\cf7 CGPath\cf1 );\
    [[\cf7 UIColor\cf1  \cf7 greenColor\cf1 ] \cf7 set\cf1 ];\
    \cf2 // 
\f1 \'e4\'d6\'c8\'be
\f0 \cf1 \
    \cf7 CGContextFillPath\cf1 (ctx);\
    \
    \cf2 // 
\f1 \'b5\'da\'c8\'fd\'b8\'f6\'c9\'c8\'d0\'ce
\f0 \cf1 \
    startA = endA;\
    angle = \cf4 50\cf1  / \cf4 100.0\cf1  * \cf3 M_PI\cf1  * \cf4 2\cf1 ;\
    endA = startA + angle;\
    \cf7 UIBezierPath\cf1  *path2 = [\cf7 UIBezierPath\cf1  \cf7 bezierPathWithArcCenter\cf1 :center \cf7 radius\cf1 :radius \cf7 startAngle\cf1 :startA \cf7 endAngle\cf1 :endA \cf7 clockwise\cf1 :\cf6 YES\cf1 ];\
    [path2 \cf7 addLineToPoint\cf1 :center];\
    \cf2 // 
\f1 \'cc\'ed\'bc\'d3\'b5\'bd\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextAddPath\cf1 (ctx, path2.\cf7 CGPath\cf1 );\
    [[\cf7 UIColor\cf1  \cf7 blueColor\cf1 ] \cf7 set\cf1 ];\
    \cf2 // 
\f1 \'e4\'d6\'c8\'be
\f0 \cf1 \
    \cf7 CGContextFillPath\cf1 (ctx);\
    \
   \}\
\
\
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf6 @end\cf1 \
\
\
\
\
\
\
\
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf2 //\cf1 \
\cf2 //  HMBarView.m\cf1 \
\cf2 //  04-
\f1 \'d6\'f9\'d7\'b4\'cd\'bc
\f0 \cf1 \
\cf2 //\cf1 \
\cf2 //  Created by apple on 14-9-2.\cf1 \
\cf2 //  Copyright (c) 2014
\f1 \'c4\'ea
\f0  itcast. All rights reserved.\cf1 \
\cf2 //\cf1 \
\
\cf3 #import \cf5 "HMBarView.h"\cf3 \
#import \cf5 "UIColor+Random.h"\cf3 \
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf6 @implementation\cf1  HMBarView\
\
- (\cf6 id\cf1 )initWithFrame:(\cf7 CGRect\cf1 )frame\
\{\
    \cf6 self\cf1  = [\cf6 super\cf1  \cf7 initWithFrame\cf1 :frame];\
    \cf6 if\cf1  (\cf6 self\cf1 ) \{\
        \cf2 // Initialization code\cf1 \
    \}\
    \cf6 return\cf1  \cf6 self\cf1 ;\
\}\
\
\
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf2 // Only override drawRect: if you perform custom drawing.\cf1 \
\cf2 // An empty implementation adversely affects performance during animation.\cf1 \
- (\cf6 void\cf1 )drawRect:(\cf7 CGRect\cf1 )rect\
\{\
    \cf2 // Drawing code\cf1 \
    \cf7 NSArray\cf1  *data = \cf4 @[@25\cf1 ,\cf4 @25\cf1 ,\cf4 @50]\cf1 ;\
    \cf6 int\cf1  count = data.\cf7 count\cf1 ;\
    \
    \cf7 CGFloat\cf1  w = rect.\cf7 size\cf1 .\cf7 width\cf1  / (\cf4 2\cf1  * count - \cf4 1\cf1 );\
    \cf7 CGFloat\cf1  h = \cf4 0\cf1 ;\
    \cf7 CGFloat\cf1  x = \cf4 0\cf1 ;\
    \cf7 CGFloat\cf1  y = \cf4 0\cf1 ;\
    \cf7 CGFloat\cf1  viewH = rect.\cf7 size\cf1 .\cf7 height\cf1 ;\
    \cf2 // 1.
\f1 \'bb\'f1\'c8\'a1\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
    \cf7 CGContextRef\cf1  ctx = \cf7 UIGraphicsGetCurrentContext\cf1 ();\
    \
    \cf6 for\cf1  (\cf6 int\cf1  i = \cf4 0\cf1 ; i < count; i++) \{\
        h = viewH * [data[i] \cf7 intValue\cf1 ] / \cf4 100.0\cf1 ;\
        x = \cf4 2\cf1  * w * i;\
        y = viewH - h;\
        \cf2 // 2.
\f1 \'c6\'b4\'bd\'d3\'c2\'b7\'be\'b6
\f0 \cf1 \
        \cf7 UIBezierPath\cf1  *path = [\cf7 UIBezierPath\cf1  \cf7 bezierPathWithRect\cf1 :\cf7 CGRectMake\cf1 (x, y, w, h)];\
        \
        \cf2 // 3.
\f1 \'cc\'ed\'bc\'d3\'c2\'b7\'be\'b6\'b5\'bd\'c9\'cf\'cf\'c2\'ce\'c4
\f0 \cf1 \
        \cf7 CGContextAddPath\cf1 (ctx, path.\cf7 CGPath\cf1 );\
        \
        [[\cf7 UIColor\cf1  \cf8 randomColor\cf1 ] \cf7 set\cf1 ];\
        \
        \cf2 // 4.
\f1 \'e4\'d6\'c8\'be
\f0 \cf1 \
        \cf7 CGContextFillPath\cf1 (ctx);\
    \}\
    \
\}\
\
- (\cf6 void\cf1 )touchesBegan:(\cf7 NSSet\cf1  *)touches withEvent:(\cf7 UIEvent\cf1  *)event\
\{\
    [\cf6 self\cf1  \cf7 setNeedsDisplay\cf1 ];\
\}\
\
\
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0
\cf6 @end\cf1 \
\
}